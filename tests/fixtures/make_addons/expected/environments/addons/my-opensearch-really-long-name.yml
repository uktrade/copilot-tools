# Generated by copilot-helper v0.1-TEST / 2023-08-22 16:00:00
Parameters:
  # Copilot required Parameters...
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.

  # Parameters from the parent stack brought in via addons.parameters.yml...
  EnvironmentSecurityGroup:
    Type: String
  PrivateSubnets:
    Type: String
  VpcId:
    Type: String

Mappings:
  myOpensearchReallyLongNameEnvScalingConfigurationMap:
    
    development:
      EngineVersion: '2.3'
      InstanceType: 't3.medium.search'
      InstanceCount: 1
      DedicatedMaster: false
      VolumeSize: 200
    

  myOpensearchReallyLongNameEngineVersionMap:
    '1.0':
      EngineVersion: 'OpenSearch_1.0'
    '1.1':
      EngineVersion: 'OpenSearch_1.1'
    '1.2':
      EngineVersion: 'OpenSearch_1.2'
    '1.3':
      EngineVersion: 'OpenSearch_1.3'
    '2.3':
      EngineVersion: 'OpenSearch_2.3'

Conditions:
  myOpensearchReallyLongNameDisableHA: !Equals [!FindInMap [myOpensearchReallyLongNameEnvScalingConfigurationMap, !Ref Env, InstanceCount], 1]
  myOpensearchReallyLongNameEnableHA: !Not [Condition: myOpensearchReallyLongNameDisableHA]

Resources:
  myOpensearchReallyLongNameOpenSearchSecret:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your OS credentials'
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/copilot/${App}/${Env}/secrets/MY_OPENSEARCH_REALLY_LONG_NAME'
      Description: !Sub OpenSearch main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "opensearch"}'
        GenerateStringKey: "password"
        ExcludePunctuation: false
        RequireEachIncludedType: true
        IncludeSpace: false
        PasswordLength: 20
  # Security group to add OS to the VPC,
  # and to allow the Fargate containers to talk to OS
  myOpensearchReallyLongNameOpenSearchSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group to access OS'
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'The Security Group for my-opensearch-really-long-name to access OpenSearch.'
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-my-opensearch-really-long-name-OpenSearch-SecurityGroup'

  # Enable ingress from other ECS services created within the environment.
  myOpensearchReallyLongNameOpenSearchIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from containers in my application to the OpenSearch cluster'
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress Security Group from Fargate containers
      GroupId: !Ref 'myOpensearchReallyLongNameOpenSearchSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref EnvironmentSecurityGroup

  # Single opensearch instance
  myOpensearchReallyLongNameOpenSearchDomain:
    Type: 'AWS::OpenSearchService::Domain'
    Condition: myOpensearchReallyLongNameDisableHA
    Properties:
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - 'es:ESHttp*'
          Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/myopensearch...*'
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName:
            !Join [ "",  [ '{{resolve:secretsmanager:', !Ref myOpensearchReallyLongNameOpenSearchSecret, ":SecretString:username}}" ]]
          MasterUserPassword:
            !Join [ "",  [ '{{resolve:secretsmanager:', !Ref myOpensearchReallyLongNameOpenSearchSecret, ":SecretString:password}}" ]]
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: 'Policy-Min-TLS-1-2-2019-07'
      EngineVersion: !FindInMap
        - myOpensearchReallyLongNameEngineVersionMap
        - !FindInMap [myOpensearchReallyLongNameEnvScalingConfigurationMap, !Ref Env, EngineVersion]
        - EngineVersion
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
      EBSOptions:
        EBSEnabled: true
        VolumeSize: !FindInMap [myOpensearchReallyLongNameEnvScalingConfigurationMap, !Ref Env, VolumeSize]
        VolumeType: gp2
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: !FindInMap [myOpensearchReallyLongNameEnvScalingConfigurationMap, !Ref Env, InstanceCount]
        InstanceType: !FindInMap [myOpensearchReallyLongNameEnvScalingConfigurationMap, !Ref Env, InstanceType]
        ZoneAwarenessEnabled: false
      VPCOptions:
        SecurityGroupIds:
          - !Ref myOpensearchReallyLongNameOpenSearchSecurityGroup
        SubnetIds:
          - !Select [0, !Split [ ',', !Ref PrivateSubnets ] ]
      SoftwareUpdateOptions:
        AutoSoftwareUpdateEnabled: true
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-my-opensearch-really-long-name-OpenSearch-Domain'
        - Key: 'Copilot-Application'
          Value: !Sub ${App}
        - Key: 'Copilot-Environment'
          Value: !Sub ${Env}

  # An opensearch cluster
  myOpensearchReallyLongNameOpenSearchDomainHA:
    Type: 'AWS::OpenSearchService::Domain'
    Condition: myOpensearchReallyLongNameEnableHA
    Properties:
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - 'es:ESHttp*'
          Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/myopensearch...*'
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName:
            !Join [ "",  [ '{{resolve:secretsmanager:', !Ref myOpensearchReallyLongNameOpenSearchSecret, ":SecretString:username}}" ]]
          MasterUserPassword:
            !Join [ "",  [ '{{resolve:secretsmanager:', !Ref myOpensearchReallyLongNameOpenSearchSecret, ":SecretString:password}}" ]]
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: 'Policy-Min-TLS-1-2-2019-07'
      EngineVersion: !FindInMap
        - myOpensearchReallyLongNameEngineVersionMap
        - !FindInMap [myOpensearchReallyLongNameEnvScalingConfigurationMap, !Ref Env, EngineVersion]
        - EngineVersion
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
      EBSOptions:
        EBSEnabled: true
        VolumeSize: !FindInMap [myOpensearchReallyLongNameEnvScalingConfigurationMap, !Ref Env, VolumeSize]
        VolumeType: gp2
      ClusterConfig:
        DedicatedMasterEnabled: !FindInMap [myOpensearchReallyLongNameEnvScalingConfigurationMap, !Ref Env, DedicatedMaster]
        InstanceCount: !FindInMap [myOpensearchReallyLongNameEnvScalingConfigurationMap, !Ref Env, InstanceCount]
        InstanceType: !FindInMap [myOpensearchReallyLongNameEnvScalingConfigurationMap, !Ref Env, InstanceType]
        ZoneAwarenessEnabled: true
        ZoneAwarenessConfig:
          AvailabilityZoneCount: 3
          #Fn::length always resolves to 1 despite there being subnets.
      VPCOptions:
        SecurityGroupIds:
          - !Ref myOpensearchReallyLongNameOpenSearchSecurityGroup
        SubnetIds: !Split [ ",", !Ref PrivateSubnets ]
      SoftwareUpdateOptions:
        AutoSoftwareUpdateEnabled: true
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-my-opensearch-really-long-name-OpenSearch-Domain'
        - Key: 'Copilot-Application'
          Value: !Sub ${App}
        - Key: 'Copilot-Environment'
          Value: !Sub ${Env}

  myOpensearchReallyLongNameOpenSearchEndpointConfigParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/copilot/${App}/${Env}/secrets/MY_OPENSEARCH_REALLY_LONG_NAME"
      Type: String
      Value: !Sub
        - "https://${username}:${password}@${url}"
        - url: !If
            - myOpensearchReallyLongNameEnableHA
            - !GetAtt myOpensearchReallyLongNameOpenSearchDomainHA.DomainEndpoint
            - !GetAtt myOpensearchReallyLongNameOpenSearchDomain.DomainEndpoint
          username: !Join [ "",  [ '{{resolve:secretsmanager:', !Ref myOpensearchReallyLongNameOpenSearchSecret, ":SecretString:username}}" ]]
          password: !Join [ "",  [ '{{resolve:secretsmanager:', !Ref myOpensearchReallyLongNameOpenSearchSecret, ":SecretString:password}}" ]]
