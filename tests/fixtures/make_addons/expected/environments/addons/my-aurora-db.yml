# Generated by copilot-helper v0.1-TEST / 2023-08-22 16:00:00

Parameters:
  # Copilot required Parameters...
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.

  # Parameters from the parent stack brought in via addons.parameters.yml...
  EnvironmentSecurityGroup:
    Type: String
  PrivateSubnets:
    Type: String
  VpcId:
    Type: String

  # Other parameters...
  # Customize your Aurora Postgres cluster by setting the default value of the following parameters.
  myAuroraDbDBName:
    Type: String
    Description: The name of the initial database to be created in the Aurora Serverless v2 cluster.
    Default: main
    # Cannot have special characters
    # Naming constraints: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints

Mappings:
  myAuroraDbEnvScalingConfigurationMap:

    development:
      DBMinCapacity: 0.5
      DBMaxCapacity: 8


Resources:
  myAuroraDbDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Group of Copilot private subnets for Aurora Serverless v2 cluster.
      SubnetIds: !Split [ ",", !Ref PrivateSubnets ]

  myAuroraDbSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group for your workload to access the Aurora Serverless v2 cluster myAuroraDb'
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'The Security Group for my-aurora-db to access Aurora Serverless v2 cluster myAuroraDb.'
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-my-aurora-db-Aurora'

  myAuroraDbDBClusterSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group for your Aurora Serverless v2 cluster myAuroraDb'
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The Security Group for the Aurora Serverless v2 cluster.
      SecurityGroupIngress:
        - ToPort: 5432
          FromPort: 5432
          IpProtocol: tcp
          Description: 'From the Aurora Security Group of the workload my-aurora-db.'
          SourceSecurityGroupId: !Ref myAuroraDbSecurityGroup
      VpcId: !Ref VpcId

  myAuroraDbAuroraSecret:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your DB credentials'
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/copilot/${App}/${Env}/secrets/MY_AURORA_DB'
      Description: !Sub Aurora main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16
        ExcludeCharacters: '[]{}()"@/\;=?&`><:|#'

  myAuroraDbDBClusterParameterGroup:
    Metadata:
      'aws:copilot:description': 'A DB parameter group for engine configuration values'
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Description: !Ref 'AWS::StackName'
      Family: 'aurora-postgresql14'
      Parameters:
        client_encoding: 'UTF8'
        log_statement: ddl
        log_statement_sample_rate: '1.0'

  myAuroraDbKMSKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: "KMS Key for Aurora encryption"
      KeyPolicy:
        Version: '2012-10-17'
        Id: !Sub '${App}-${Env}-myAuroraDb-cluster-key'
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: kms:*
          Resource: '*'

  myAuroraDbKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${App}-${Env}-myAuroraDb-cluster-key'
      TargetKeyId: !Ref myAuroraDbKMSKey

  myAuroraDbDBCluster:
    Metadata:
      'aws:copilot:description': 'The myAuroraDb Aurora Serverless v2 database cluster'
    Type: 'AWS::RDS::DBCluster'
    Properties:
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 8
      MasterUsername:
        !Join [ "",  [ '{{resolve:secretsmanager:', !Ref myAuroraDbAuroraSecret, ":SecretString:username}}" ]]
      MasterUserPassword:
        !Join [ "",  [ '{{resolve:secretsmanager:', !Ref myAuroraDbAuroraSecret, ":SecretString:password}}" ]]
      DatabaseName: !Ref myAuroraDbDBName
      Engine: 'aurora-postgresql'
      EngineVersion: '14.4'
      EnableCloudwatchLogsExports:
        - postgresql
      DBClusterParameterGroupName: !Ref myAuroraDbDBClusterParameterGroup
      DBSubnetGroupName: !Ref myAuroraDbDBSubnetGroup
      KmsKeyId: !Ref myAuroraDbKMSKey
      Port: 5432
      VpcSecurityGroupIds:
        - !Ref myAuroraDbDBClusterSecurityGroup
      ServerlessV2ScalingConfiguration:
        MinCapacity: !FindInMap [myAuroraDbEnvScalingConfigurationMap, !Ref Env, DBMinCapacity]
        MaxCapacity: !FindInMap [myAuroraDbEnvScalingConfigurationMap, !Ref Env, DBMaxCapacity]
      StorageEncrypted: true

  myAuroraDbDBWriterInstance:
    Metadata:
      'aws:copilot:description': 'The myAuroraDb Aurora Serverless v2 writer instance'
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBClusterIdentifier: !Ref myAuroraDbDBCluster
      DBInstanceClass: db.serverless
      EnablePerformanceInsights: true
      Engine: 'aurora-postgresql'
      PromotionTier: 1
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region

  myAuroraDbSecretAuroraClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref myAuroraDbAuroraSecret
      TargetId: !Ref myAuroraDbDBCluster
      TargetType: AWS::RDS::DBCluster

  # Enable ingress from other ECS services created within the environment.
  myAuroraDbEnvironmentIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from containers in my application to the OpenSearch cluster'
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress Security Group from Fargate containers
      GroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref EnvironmentSecurityGroup

  myAuroraDbLambdaIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from Lambda Functions in my application to the DB cluster'
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from Lambda Functions to DB
      GroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'

  myAuroraDbSecretsManagerIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from Lambda Functions in my application to the Secrets Manager'
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from Lambda Functions to Secrets Manager
      GroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'

  myAuroraDbLambdaEgress:
    Metadata:
      'aws:copilot:description': 'Allow egress from DB cluster in my application to the Lambda Function'
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Egress from DB to Lambda Functions
      GroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'

  myAuroraDbSecretsManagerEgress:
    Metadata:
      'aws:copilot:description': 'Allow egress from Secrets Manager in my application to the Lambda Function'
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Egress from Secrets Manager to Lambda Functions
      GroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'

  myAuroraDbHTTPSEgress:
    Metadata:
      'aws:copilot:description': 'Allow egress for HTTPS (so the Lambda Function can post a success response back to the Custom Resource)'
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp: 0.0.0.0/0
      Description: Egress for HTTPS
      GroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  myAuroraDbLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${App}-${Env}-aurora-create-user"
      Handler: index.handler
      Runtime: python3.11
      Layers:
        - arn:aws:lambda:eu-west-2:763451185160:layer:python-postgres:1
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt myAuroraDbLambdaFunctionExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref myAuroraDbDBClusterSecurityGroup
        SubnetIds: !Split [ ",", !Ref PrivateSubnets ]
      Code:
        ZipFile: |
          import json

          import boto3
          import cfnresponse
          import psycopg2
          from botocore.exceptions import ClientError


          def drop_user(cursor):
              cursor.execute("SELECT * FROM pg_catalog.pg_user WHERE usename = 'application_user'")

              if cursor.fetchone() is not None:
                  cursor.execute("GRANT application_user TO postgres")
                  cursor.execute("DROP OWNED BY application_user")
                  cursor.execute("DROP USER application_user")


          def create_db_user(conn, cursor, password):
              drop_user(cursor)

              cursor.execute("CREATE USER application_user WITH ENCRYPTED PASSWORD '%s'" % password)
              cursor.execute(
                  "GRANT SELECT, INSERT, UPDATE, DELETE, TRIGGER ON ALL TABLES IN SCHEMA public TO application_user;")
              cursor.execute("GRANT application_user to postgres;")
              cursor.execute(
                  "ALTER DEFAULT PRIVILEGES FOR USER application_user IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE, TRIGGER ON TABLES TO application_user;")
              conn.commit()


          def create_or_update_application_user_secret(ssm, application_user_secret_name,
                                                       application_user_secret_string, event):
              application_user_secret_description = event['ResourceProperties']['SecretDescription']
              copilot_application = event['ResourceProperties']['CopilotApplication']
              copilot_environment = event['ResourceProperties']['CopilotEnvironment']

              application_user_secret = None

              try:
                  application_user_secret = ssm.put_parameter(
                      Name=application_user_secret_name,
                      Description=application_user_secret_description,
                      Value=json.dumps(application_user_secret_string),
                      Tags=[
                          {'Key': 'custom:cloudformation:stack-name', 'Value': event["StackId"].split('/')[1]},
                          {'Key': 'custom:cloudformation:logical-id', 'Value': event["LogicalResourceId"]},
                          {'Key': 'custom:cloudformation:stack-d', 'Value': event["StackId"]},
                          {'Key': 'copilot-application', 'Value': copilot_application},
                          {'Key': 'copilot-environment', 'Value': copilot_environment},
                      ],
                      Type="String",
                  )
              except ClientError as error:
                  if error.response["Error"]["Code"] == "ParameterAlreadyExists":
                      application_user_secret = ssm.put_parameter(
                          Name=application_user_secret_name,
                          Description=application_user_secret_description,
                          Value=json.dumps(application_user_secret_string),
                          Overwrite=True,
                      )

              return application_user_secret


          def handler(event, context):
              print("REQUEST RECEIVED:\n" + json.dumps(event))

              db_master_user_secret = event['ResourceProperties']['MasterUserSecret']
              application_user_secret_name = event['ResourceProperties']['SecretName']
              application_user_secret_description = event['ResourceProperties']['SecretDescription']
              copilot_application = event['ResourceProperties']['CopilotApplication']
              copilot_environment = event['ResourceProperties']['CopilotEnvironment']

              secrets_manager = boto3.client("secretsmanager")
              ssm = boto3.client("ssm")

              master_user = json.loads(secrets_manager.get_secret_value(SecretId=db_master_user_secret)["SecretString"])

              application_user_password = secrets_manager.get_random_password(
                  PasswordLength=16,
                  ExcludeCharacters='[]{}()"@/\;=?&`><:|#',
                  ExcludePunctuation=True,
                  IncludeSpace=False,
              )["RandomPassword"]

              application_user_secret_string = {
                  "username": "application_user",
                  "password": application_user_password,
                  "engine": master_user["engine"],
                  "port": master_user["port"],
                  "dbname": master_user["dbname"],
                  "host": master_user["host"],
                  "dbClusterIdentifier": master_user["dbClusterIdentifier"]
              }

              conn = psycopg2.connect(
                  dbname=master_user["dbname"],
                  user=master_user["username"],
                  password=master_user["password"],
                  host=master_user["host"],
                  port=master_user["port"]
              )

              cursor = conn.cursor()

              response = {"Status": "SUCCESS"}

              try:
                  match event["RequestType"]:
                      case "Create":
                          create_db_user(conn, cursor, application_user_password)

                          response = {
                              **response,
                              "Data": create_or_update_application_user_secret(
                                  ssm, application_user_secret_name, application_user_secret_string, event
                              )
                          }
                      case "Update":
                          create_db_user(conn, cursor, application_user_password)

                          response = {
                              **response,
                              "Data": create_or_update_application_user_secret(
                                  ssm, application_user_secret_name, application_user_secret_string, event
                              )
                          }
                      case "Delete":
                          drop_user(cursor)

                          response = {
                              **response,
                              "Data": ssm.delete_parameter(Name=application_user_secret_name)
                          }
                      case _:
                          response = {"Status": "FAILED",
                                      "Data": {"Error": f"""Invalid requestType of '${event["RequestType"]}'"""}}
              except Exception as e:
                  response = {"Status": "FAILED", "Data": {"Error": str(e)}}

              cursor.close()
              conn.close()

              print(json.dumps(response, default=str))
              cfnresponse.send(event, context, response["Status"], response["Data"], event["LogicalResourceId"])

  myAuroraDbApplicationUser:
    Type: 'Custom::myAuroraDbApplicationUser'
    Properties:
      ServiceToken: !GetAtt 'myAuroraDbLambdaFunction.Arn'
      CopilotApplication: !Sub "${App}"
      CopilotEnvironment: !Sub "${Env}"
      MasterUserSecret: !Ref myAuroraDbAuroraSecret
      SecretDescription: !Sub Aurora application user secret for ${AWS::StackName}
      SecretName: !Sub '/copilot/${App}/${Env}/secrets/MY_AURORA_DB_APPLICATION_USER'
    # Resource based metadata block to ignore reference to resources in other addon templates. Do not remove.
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            # https://github.com/aws-cloudformation/cfn-lint/blob/main/docs/rules.md
            - E3005
    DependsOn:
      - VpcEndpoint
      - myAuroraDbDBWriterInstance

  myAuroraDbLambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${App}-${Env}-aurora-user"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub "${App}-${Env}-aurora-user"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'ssm:DeleteParameter'
                  - 'ssm:PutParameter'
                  - 'ssm:AddTagsToResource'
                  - 'kms:Decrypt'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:GetRandomPassword'
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
