# Generated by copilot-helper v0.1-TEST / 2023-08-22 16:00:00
# Image Builder - Runs on push to organisation/repository repository
- op: add
  path: /Resources/ImageBuildProject
  value:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: codebuild-test-app-application
      Description: |
        CodeBuild Project that creates images from pushes on
        all branches to the application codebase
      BadgeEnabled: true
      Artifacts:
        Type: NO_ARTIFACTS
      Cache:
          Modes:
              - LOCAL_DOCKER_LAYER_CACHE
          Type: LOCAL
      EncryptionKey: !ImportValue test-app-ArtifactKey
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        Image: public.ecr.aws/uktrade/ci-image-builder
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Sub '${AWS::AccountId}'
          - Name: PARTITION
            Value: !Ref AWS::Partition
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Source:
        Auth:
          Type: OAUTH
        GitCloneDepth: 0
        GitSubmodulesConfig:
          FetchSubmodules: true
        Location: https://github.com/organisation/repository.git
        Type: GITHUB
        BuildSpec: |
          version: 0.2
          env:
            parameter-store:
              SLACK_CHANNEL_ID: "/codebuild/slack_oauth_channel"
              SLACK_TOKEN: "/codebuild/slack_oauth_token"
          phases:
            install:
              commands:
                - |
                  if [ -f .copilot/phases/install.sh ]; then
                    bash .copilot/phases/install.sh
                  fi
            pre_build:
              commands:
                - |
                  if [ -f .copilot/phases/pre_build.sh ]; then
                    bash .copilot/phases/pre_build.sh
                  fi
            build:
              commands:
                - |
                  if [ -f .copilot/phases/build.sh ]; then
                    bash .copilot/phases/build.sh
                  fi
                - /work/cli build --publish
            post_build:
              commands:
                - |
                  if [ -f .copilot/phases/post_build.sh ]; then
                    bash .copilot/phases/post_build.sh
                  fi
      TimeoutInMinutes: 30
      Triggers:
        BuildType: BUILD
        FilterGroups:
          - - Type: EVENT
              Pattern: PUSH
            - Type: HEAD_REF
              Pattern: ^refs/heads/main$
        Webhook: true
      Visibility: PRIVATE

- op: add
  path: /Resources/ECRRepository
  value:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: test-app/application
      EmptyOnDelete: true
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE

- op: add
  path: /Resources/PipelineRolePolicy/Properties/PolicyDocument/Statement/0/Action/-
  value: ecr:DescribeImages

# Replace the source code action with a trigger on push to ECR
- op: replace
  path: /Resources/Pipeline/Properties/Stages/0/Actions/0
  value:
    Name: ImagePublished
    ActionTypeId:
      Category: Source
      Owner: AWS
      Version: 1
      Provider: ECR
    Configuration:
      RepositoryName: test-app/application
    OutputArtifacts:
      - Name: ECRMetadata
    RunOrder: 1

# Remove the codebuild step from the pipeline
- op: remove
  path: /Resources/Pipeline/Properties/Stages/1


# Environments
# dev
- op: replace
  path: /Resources/Pipeline/Properties/Stages/1/Actions/0
  value:
    Name: Deploy
    ActionTypeId:
      Category: Build
      Owner: AWS
      Version: 1
      Provider: CodeBuild
    Configuration:
      ProjectName: !Ref BuildProject
      PrimarySource: ECRMetadata
      EnvironmentVariables: |
        [
          {"name": "COPILOT_ENVIRONMENT", "value": "dev"},
          {"name": "ECR_TAG_PATTERN", "value": "branch-main"}
        ]
    RunOrder: 1
    InputArtifacts:
      - Name: ECRMetadata

# staging
- op: replace
  path: /Resources/Pipeline/Properties/Stages/2/Actions/0
  value:
    Name: Deploy
    ActionTypeId:
      Category: Build
      Owner: AWS
      Version: 1
      Provider: CodeBuild
    Configuration:
      ProjectName: !Ref BuildProject
      PrimarySource: ECRMetadata
      EnvironmentVariables: |
        [
          {"name": "COPILOT_ENVIRONMENT", "value": "staging"},
          {"name": "ECR_TAG_PATTERN", "value": "branch-main"}
        ]
    RunOrder: 1
    InputArtifacts:
      - Name: ECRMetadata

# prod
- op: replace
  path: /Resources/Pipeline/Properties/Stages/3/Actions/1
  value:
    Name: Deploy
    ActionTypeId:
      Category: Build
      Owner: AWS
      Version: 1
      Provider: CodeBuild
    Configuration:
      ProjectName: !Ref BuildProject
      PrimarySource: ECRMetadata
      EnvironmentVariables: |
        [
          {"name": "COPILOT_ENVIRONMENT", "value": "prod"},
          {"name": "ECR_TAG_PATTERN", "value": "branch-main"}
        ]
    RunOrder: 2
    InputArtifacts:
      - Name: ECRMetadata


## Customised BuildProject
- op: replace
  path: /Resources/BuildProject/Properties/Environment/Image
  value: aws/codebuild/amazonlinux2-x86_64-standard:5.0

- op: add
  path: /Resources/BuildProject/Properties/ConcurrentBuildLimit
  value: 1

- op: add
  path: /Resources/BuildProject/Properties/Environment/EnvironmentVariables/-
  value:
    Name: CODESTAR_CONNECTION_ID
    Value: test-app

- op: add
  path: /Resources/BuildProject/Properties/Environment/EnvironmentVariables/-
  value:
    Name: DEPLOY_REPOSITORY
    Value: uktrade/test-app-deploy

- op: add
  path: /Resources/BuildProject/Properties/Environment/EnvironmentVariables/-
  value:
    Name: CODEBASE_REPOSITORY
    Value: organisation/repository

- op: add
  path: /Resources/BuildProject/Properties/Environment/EnvironmentVariables/-
  value:
    Name: COPILOT_SERVICES
    Value: web worker

- op: add
  path: /Resources/BuildProject/Properties/Environment/EnvironmentVariables/-
  value:
    Name: ECR_REPOSITORY
    Value: !Ref ECRRepository

- op: add
  path: /Resources/BuildProjectPolicy/Properties/PolicyDocument/Statement/-
  value:
    Effect: Allow
    Action:
      - codestar-connections:UseConnection
    Resource:
      - arn:aws:codestar-connections:eu-west-2:1234567:connection/test-app

- op: replace
  path: /Resources/BuildProject/Properties/Source/BuildSpec
  value: |
    version: 0.2
    env:
      git-credential-helper: yes
    phases:
      install:
        commands:
          - echo "cd into $CODEBUILD_SRC_DIR"
          - cd $CODEBUILD_SRC_DIR
          # Download the copilot linux binary.
          - wget -q https://ecs-cli-v2-release.s3.amazonaws.com/copilot-linux-v1.31.0 -O copilot
          - chmod +x ./copilot
          # Download pack
          - curl -sLO https://github.com/buildpacks/pack/releases/download/v0.31.0/pack-v0.31.0-linux.tgz
          - tar xfz pack-v0.31.0-linux.tgz
          - chmod +x ./pack
      pre_build:
        commands:
          - export COLOR="false"
          - export CI="true"
          - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.eu-west-2.amazonaws.com"
          - git clone "https://codestar-connections.$AWS_REGION.amazonaws.com/git-http/$AWS_ACCOUNT_ID/$AWS_REGION/$CODESTAR_CONNECTION_ID/$DEPLOY_REPOSITORY.git" deploy
      build:
        commands:
          - |
            if [ -z "$IMAGE_TAG" ]; then
              echo "Automatic Deployment Detected"
              IMAGE_DATA="$(jq -rc < "$CODEBUILD_SRC_DIR/imageDetail.json")"
              MATCHING_IMAGE_TAG="$(echo "$IMAGE_DATA" | jq -rc --arg TAG_PATTERN "$ECR_TAG_PATTERN" '.ImageTags[] | select(. | startswith($TAG_PATTERN))')"
              if [ -z "$MATCHING_IMAGE_TAG" ]; then
                echo "Not tagged with matching pattern, no deployment needed, skipping release."
                SKIP_DEPLOYMENT="TRUE"
              fi
              IMAGE_TAG="$(echo "$IMAGE_DATA" | jq -rc '.ImageTags[] | select(. | startswith("commit-"))')"
              ./pack inspect "$(jq -rc '.ImageURI' < imageDetail.json)"
            else
              echo "Manual Deployment Detected for $IMAGE_TAG"
            fi
          - |
            if [ -z "$SKIP_DEPLOYMENT" ]; then
              echo "Releasing tag $IMAGE_TAG to services ${COPILOT_SERVICES/ /, } in environment '$COPILOT_ENVIRONMENT'..."
              cd deploy
              for COPILOT_SERVICE in $COPILOT_SERVICES; do
                ../copilot svc deploy --name "$COPILOT_SERVICE" --env "$COPILOT_ENVIRONMENT" --force
              done
            fi
