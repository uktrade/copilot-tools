# Generated by copilot-helper v0.1-TEST / 2023-08-22 16:00:00
Parameters:
  # Copilot required Parameters...
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.

Resources:
  myAuroraDbLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${App}-${Env}-myAuroraDb-aurora-create-user"
      Handler: index.handler
      Runtime: python3.11
      Layers:
        - arn:aws:lambda:eu-west-2:763451185160:layer:python-postgres:1
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt myAuroraDbLambdaFunctionExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue
            'Fn::Sub': "${App}-${Env}-myAuroraDb-DBClusterSecurityGroupName"
        SubnetIds: 
          !Split 
            - ","
            - !ImportValue
              'Fn::Sub': "${App}-${Env}-myAuroraDb-PrivateSubnetsName" 
      Code:
        ZipFile: |
          import json

          import boto3
          import cfnresponse
          import psycopg2
          from botocore.exceptions import ClientError


          def drop_user(cursor):
              cursor.execute("SELECT * FROM pg_catalog.pg_user WHERE usename = 'application_user'")

              if cursor.fetchone() is not None:
                  print("ABOUT TO DELETE APPLICATION USER")
                  cursor.execute("GRANT application_user TO postgres")
                  print("GRANTED")
                  cursor.execute("DROP OWNED BY application_user")
                  print("DROP OWNED BY")
                  cursor.execute("DROP USER application_user")



          def create_db_user(conn, cursor, password):
              drop_user(cursor)

              cursor.execute("CREATE USER application_user WITH ENCRYPTED PASSWORD '%s'" % password)
              cursor.execute(
                  "GRANT SELECT, INSERT, UPDATE, DELETE, TRIGGER ON ALL TABLES IN SCHEMA public TO application_user;")
              cursor.execute("GRANT application_user to postgres;")
              cursor.execute(
                  "ALTER DEFAULT PRIVILEGES FOR USER application_user IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE, TRIGGER ON TABLES TO application_user;")
              conn.commit()


          def create_or_update_application_user_secret(ssm, application_user_secret_name, application_user_secret_string, event):
              application_user_secret_description = event['ResourceProperties']['SecretDescription']
              copilot_application = event['ResourceProperties']['CopilotApplication']
              copilot_environment = event['ResourceProperties']['CopilotEnvironment']

              application_user_secret = None

              try:
                  application_user_secret = ssm.put_parameter(
                      Name=application_user_secret_name,
                      Description=application_user_secret_description,
                      Value=json.dumps(application_user_secret_string),
                      Tags=[
                          {'Key': 'custom:cloudformation:stack-name', 'Value': event["StackId"].split('/')[1]},
                          {'Key': 'custom:cloudformation:logical-id', 'Value': event["LogicalResourceId"]},
                          {'Key': 'custom:cloudformation:stack-d', 'Value': event["StackId"]},
                          {'Key': 'copilot-application', 'Value': copilot_application},
                          {'Key': 'copilot-environment', 'Value': copilot_environment},
                      ],
                      Type="String",
                  )
              except ClientError as error:
                  if error.response["Error"]["Code"] == "ParameterAlreadyExists":
                      application_user_secret = ssm.put_parameter(
                          Name=application_user_secret_name,
                          Description=application_user_secret_description,
                          Value=json.dumps(application_user_secret_string),
                          Overwrite=True,
                      )

              return application_user_secret


          def handler(event, context):
              print("REQUEST RECEIVED:\n", json.dumps(event))

              db_master_user_secret = event['ResourceProperties']['MasterUserSecret']
              application_user_secret_name = event['ResourceProperties']['SecretName']
              application_user_secret_description = event['ResourceProperties']['SecretDescription']
              copilot_application = event['ResourceProperties']['CopilotApplication']
              copilot_environment = event['ResourceProperties']['CopilotEnvironment']

              secrets_manager = boto3.client("secretsmanager")
              ssm = boto3.client("ssm")

              master_user = json.loads(secrets_manager.get_secret_value(SecretId=db_master_user_secret)["SecretString"])

              application_user_password = secrets_manager.get_random_password(
                  PasswordLength=16,
                  ExcludeCharacters='[]{}()"@/\;=?&`><:|#',
                  ExcludePunctuation=True,
                  IncludeSpace=False,
              )["RandomPassword"]

              application_user_secret_string = {
                  "username": "application_user",
                  "password": application_user_password,
                  "engine": master_user["engine"],
                  "port": master_user["port"],
                  "dbname": master_user["dbname"],
                  "host": master_user["host"],
              }
              
              if "dbClusterIdentifier" in master_user.keys():
                  application_user_secret_string["dbClusterIdentifier"] = master_user["dbClusterIdentifier"]
              
              if "dbInstanceIdentifier" in master_user.keys():
                  application_user_secret_string["dbInstanceIdentifier"] = master_user["dbInstanceIdentifier"]

              conn = psycopg2.connect(
                  dbname=master_user["dbname"],
                  user=master_user["username"],
                  password=master_user["password"],
                  host=master_user["host"],
                  port=master_user["port"]
              )

              cursor = conn.cursor()

              response = {"Status": "SUCCESS"}

              try:
                  match event["RequestType"]:
                      case "Create":
                          create_db_user(conn, cursor, application_user_password)

                          response = {
                              **response,
                              "Data": create_or_update_application_user_secret(
                                  ssm, application_user_secret_name, application_user_secret_string, event
                              )
                          }
                      case "Update":
                          create_db_user(conn, cursor, application_user_password)

                          response = {
                              **response,
                              "Data": create_or_update_application_user_secret(
                                  ssm, application_user_secret_name, application_user_secret_string, event
                              )
                          }
                      case "Delete":
                          drop_user(cursor)
                          print("USER DROPPED")
                          # try:
                          #     data = ssm.delete_parameter(Name=application_user_secret_name)
                          #     print(str(data))
                          response = {
                              **response,
                              "Data": {"message": "User successfully dropped."}
                          }
                          # except Exception as e:
                          #     print("SSM ERROR:", str(e))
                          #     response = {"Status": "FAILED", "Data": {"Error": str(e)}}
                          
                      case _:
                          response = {"Status": "FAILED",
                                      "Data": {"Error": f"""Invalid requestType of '${event["RequestType"]}'"""}}
              except Exception as e:
                  response = {"Status": "FAILED", "Data": {"Error": str(e)}}
              print("ABOUT TO RUN cursor.close(). PRINTING RESPONSE:\n", json.dumps(response, default=str))
              cursor.close()
              conn.close()

              print("SENDING RESPONSE:\n", json.dumps(response, default=str))
              try:
                  cfnresponse.send(event, context, response["Status"], response["Data"], event["LogicalResourceId"])
              except Exception as e:
                  print("Error sending response:", str(e))
              print("RESPONSE SENT")

  myAuroraDbApplicationUser:
    Type: 'Custom::myAuroraDbApplicationUser'
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt 'myAuroraDbLambdaFunction.Arn'
      CopilotApplication: !Sub "${App}"
      CopilotEnvironment: !Sub "${Env}"
      MasterUserSecret: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myAuroraDb-AuroraSecretName"
      SecretDescription: !Sub  application user secret for ${AWS::StackName}
      SecretName: !Sub '/copilot/${App}/${Env}/secrets/MY_AURORA_DB_APPLICATION_USER'
      DefaultPublicRoute: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myAuroraDb-DefaultPublicRouteName"
      InternetGateway: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myAuroraDb-InternetGatewayName"
      InternetGatewayAttachment: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myAuroraDb-InternetGatewayAttachmentName"
      PublicRouteTable: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myAuroraDb-PublicRouteTableName"
      PublicSubnet1RouteTableAssociation:
        Fn::ImportValue: 
          !Sub "${App}-${Env}-myAuroraDb-PublicSubnet1RouteTableAssociationName"
      PublicSubnet2RouteTableAssociation: 
        Fn::ImportValue: 
          !Sub "${App}-${Env}-myAuroraDb-PublicSubnet2RouteTableAssociationName"
      Snapshot: ""
    # Resource based metadata block to ignore reference to resources in other addon templates. Do not remove.
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            # https://github.com/aws-cloudformation/cfn-lint/blob/main/docs/rules.md
            - E3005

  myAuroraDbLambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${App}-${Env}-myAuroraDb-user"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub "${App}-${Env}-myAuroraDb-user"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'ssm:DeleteParameter'
                  - 'ssm:PutParameter'
                  - 'ssm:AddTagsToResource'
                  - 'kms:Decrypt'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:GetRandomPassword'
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
