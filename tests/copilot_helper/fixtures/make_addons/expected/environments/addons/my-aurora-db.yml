# Generated by copilot-helper v0.1-TEST / 2023-08-22 16:00:00

Parameters:
  # Copilot required Parameters...
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.

  # Parameters from the parent stack brought in via addons.parameters.yml...
  EnvironmentSecurityGroup:
    Type: String
  DefaultPublicRoute:
    Type: String
  InternetGateway:
    Type: String
  InternetGatewayAttachment:
    Type: String
  PrivateSubnets:
    Type: String
  PublicRouteTable:
    Type: String
  PublicSubnet1RouteTableAssociation:
    Type: String
  PublicSubnet2RouteTableAssociation:
    Type: String
  VpcId:
    Type: String

  # Other parameters...
  # Customize your Aurora Postgres cluster by setting the default value of the following parameters.
  myAuroraDbDBName:
    Type: String
    Description: The name of the initial database to be created in the Aurora Serverless v2 cluster.
    Default: main
    # Cannot have special characters
    # Naming constraints: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints

Mappings:
  myAuroraDbEnvironmentConfigMap:
    development:
      DBMinCapacity: 0.5
      DBMaxCapacity: 8
      DeletionPolicy: Delete
      SnapshotIdentifier: my-recent-snapshot
      DeletionProtection: True
    production:
      DBMinCapacity: 0.5
      DBMaxCapacity: 8
      DeletionPolicy: Delete
      SnapshotIdentifier: ""
      DeletionProtection: False

Conditions:
  myAuroraDbCreateProdSubFilter: !Or [!Equals [!Ref Env, prod], !Equals [!Ref Env, production], !Equals [!Ref Env, PROD], !Equals [!Ref Env, PRODUCTION]]
  myAuroraDbUseSnapshot: !Not [!Equals [!FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, SnapshotIdentifier], ""]]

Resources:
  myAuroraDbDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    DeletionPolicy: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      DBSubnetGroupDescription: Group of Copilot private subnets for Aurora Serverless v2 cluster.
      SubnetIds: !Split [ ",", !Ref PrivateSubnets ]

  myAuroraDbSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group for your workload to access the Aurora Serverless v2 cluster myAuroraDb'
    Type: 'AWS::EC2::SecurityGroup'
    DeletionPolicy: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      GroupDescription: 'The Security Group for my-aurora-db to access Aurora Serverless v2 cluster myAuroraDb.'
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-my-aurora-db-Aurora'

  myAuroraDbDBClusterSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group for your Aurora Serverless v2 cluster myAuroraDb'
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      GroupDescription: The Security Group for the Aurora Serverless v2 cluster.
      SecurityGroupIngress:
        - ToPort: 5432
          FromPort: 5432
          IpProtocol: tcp
          Description: 'From the Aurora Security Group of the workload my-aurora-db.'
          SourceSecurityGroupId: !Ref myAuroraDbSecurityGroup
      VpcId: !Ref VpcId

  myAuroraDbAuroraSecret:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your DB credentials'
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/copilot/${App}/${Env}/secrets/MY_AURORA_DB'
      Description: !Sub Aurora main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16
        ExcludeCharacters: '[]{}()"@/\;=?&`><:|#'

  myAuroraDbDBClusterParameterGroup:
    Metadata:
      'aws:copilot:description': 'A DB parameter group for engine configuration values'
    Type: 'AWS::RDS::DBClusterParameterGroup'
    DeletionPolicy: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref 'AWS::StackName'
      Family: 'aurora-postgresql14'
      Parameters:
        client_encoding: 'UTF8'
        log_statement: ddl
        log_statement_sample_rate: '1.0'

  myAuroraDbKMSKey:
    Type: "AWS::KMS::Key"
    DeletionPolicy: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: "KMS Key for Aurora encryption"
      KeyPolicy:
        Version: '2012-10-17'
        Id: !Sub '${App}-${Env}-myAuroraDb-cluster-key'
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: kms:*
          Resource: '*'

  myAuroraDbKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${App}-${Env}-myAuroraDb-cluster-key'
      TargetKeyId: !Ref myAuroraDbKMSKey

  myAuroraDbDBCluster:
    Metadata:
      'aws:copilot:description': 'The myAuroraDb Aurora Serverless v2 database cluster'
    Type: 'AWS::RDS::DBCluster'
    DeletionPolicy: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 8
      MasterUsername:
        !If [
          myAuroraDbUseSnapshot,
          !Ref AWS::NoValue,
          !Join [ "",  [ '{{resolve:secretsmanager:', !Ref myAuroraDbAuroraSecret, ":SecretString:username}}" ]]
        ]
      MasterUserPassword:
        !If [
          myAuroraDbUseSnapshot,
          !Ref AWS::NoValue,
          !Join [ "",  [ '{{resolve:secretsmanager:', !Ref myAuroraDbAuroraSecret, ":SecretString:password}}" ]]
        ]
      DatabaseName: !Ref myAuroraDbDBName
      Engine: 'aurora-postgresql'
      EngineVersion: '14.4'
      EnableCloudwatchLogsExports:
        - postgresql
      DBClusterParameterGroupName: !Ref myAuroraDbDBClusterParameterGroup
      DBSubnetGroupName: !Ref myAuroraDbDBSubnetGroup
      KmsKeyId: !Ref myAuroraDbKMSKey
      Port: 5432
      VpcSecurityGroupIds:
        - !Ref myAuroraDbDBClusterSecurityGroup
      ServerlessV2ScalingConfiguration:
        MinCapacity: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DBMinCapacity]
        MaxCapacity: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DBMaxCapacity]
      SnapshotIdentifier: !If [myAuroraDbUseSnapshot, !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, SnapshotIdentifier], !Ref AWS::NoValue]
      StorageEncrypted: true
      DeletionProtection: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionProtection]

  myAuroraDbDBWriterInstance:
    Metadata:
      'aws:copilot:description': 'The myAuroraDb Aurora Serverless v2 writer instance'
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      DBClusterIdentifier: !Ref myAuroraDbDBCluster
      DBInstanceClass: db.serverless
      EnablePerformanceInsights: true
      Engine: 'aurora-postgresql'
      PromotionTier: 1
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region

  myAuroraDbSecretAuroraClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref myAuroraDbAuroraSecret
      TargetId: !Ref myAuroraDbDBCluster
      TargetType: AWS::RDS::DBCluster

  # Enable ingress from other ECS services created within the environment.
  myAuroraDbEnvironmentIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from containers in my application to the OpenSearch cluster'
    Type: AWS::EC2::SecurityGroupIngress
    DeletionPolicy: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: Ingress Security Group from Fargate containers
      GroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref EnvironmentSecurityGroup

  myAuroraDbLambdaIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from Lambda Functions in my application to the DB cluster'
    Type: AWS::EC2::SecurityGroupIngress
    DeletionPolicy: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: Ingress from Lambda Functions to DB
      GroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'

  myAuroraDbSecretsManagerIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from Lambda Functions in my application to the Secrets Manager'
    Type: AWS::EC2::SecurityGroupIngress
    DeletionPolicy: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: Ingress from Lambda Functions to Secrets Manager
      GroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'

  myAuroraDbLambdaEgress:
    Metadata:
      'aws:copilot:description': 'Allow egress from DB cluster in my application to the Lambda Function'
    Type: AWS::EC2::SecurityGroupEgress
    DeletionPolicy: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: Egress from DB to Lambda Functions
      GroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'

  myAuroraDbSecretsManagerEgress:
    Metadata:
      'aws:copilot:description': 'Allow egress from Secrets Manager in my application to the Lambda Function'
    Type: AWS::EC2::SecurityGroupEgress
    DeletionPolicy: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: Egress from Secrets Manager to Lambda Functions
      GroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'

  myAuroraDbHTTPSEgress:
    Metadata:
      'aws:copilot:description': 'Allow egress for HTTPS (so the Lambda Function can post a success response back to the Custom Resource)'
    Type: AWS::EC2::SecurityGroupEgress
    DeletionPolicy: !FindInMap [myAuroraDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      CidrIp: 0.0.0.0/0
      Description: Egress for HTTPS
      GroupId: !Ref 'myAuroraDbDBClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  myAuroraDbSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - myAuroraDbDBWriterInstance
    Properties:
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/CWLtoSubscriptionFilterRole'
      LogGroupName: !Sub '/aws/rds/cluster/${myAuroraDbDBCluster}/postgresql'
      FilterName: !Sub '/aws/rds/cluster/${App}/${Env}/${myAuroraDbDBCluster}/postgresql'
      FilterPattern: ''
      DestinationArn: !If [myAuroraDbCreateProdSubFilter, '', '']

Outputs:
  myAuroraDbDBClusterSecurityGroupName:
    Description: The name of the db cluster security group
    Value: !Ref myAuroraDbDBClusterSecurityGroup
    Export:
      Name: !Sub "${App}-${Env}-myAuroraDb-DBClusterSecurityGroupName"

  myAuroraDbPublicSubnet1RouteTableAssociationName:
    Description: The name of the first public subnet route table association
    Value: !Ref PublicSubnet1RouteTableAssociation
    Export:
      Name: !Sub "${App}-${Env}-myAuroraDb-PublicSubnet1RouteTableAssociationName"

  myAuroraDbPublicSubnet2RouteTableAssociationName:
    Description: The name of the second public subnet route table association
    Value: !Ref PublicSubnet2RouteTableAssociation
    Export:
      Name: !Sub "${App}-${Env}-myAuroraDb-PublicSubnet2RouteTableAssociationName"
    
  myAuroraDbAuroraSecretName:
    Description: Name of Aurora db secret
    Value: !Ref myAuroraDbAuroraSecret
    Export:
      Name: !Sub "${App}-${Env}-myAuroraDb-AuroraSecretName"

  myAuroraDbInternetGatewayName:
    Description: Name of internet gateway
    Value: !Ref InternetGateway
    Export:
      Name: !Sub "${App}-${Env}-myAuroraDb-InternetGatewayName"
  
  myAuroraDbPublicRouteTableName:
    Description: Name of public route table
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub "${App}-${Env}-myAuroraDb-PublicRouteTableName"
  
  myAuroraDbDefaultPublicRouteName:
    Description: Name of default public route
    Value: !Ref DefaultPublicRoute
    Export:
      Name: !Sub "${App}-${Env}-myAuroraDb-DefaultPublicRouteName"
    
  myAuroraDbInternetGatewayAttachmentName:
    Description: Name of internet gateway attachment
    Value: !Ref InternetGatewayAttachment
    Export:
      Name: !Sub "${App}-${Env}-myAuroraDb-InternetGatewayAttachmentName"

  myAuroraDbPrivateSubnetsName:
    Description: Name of private subnets
    Value: !Ref PrivateSubnets
    Export:
      Name: !Sub "${App}-${Env}-myAuroraDb-PrivateSubnetsName"
