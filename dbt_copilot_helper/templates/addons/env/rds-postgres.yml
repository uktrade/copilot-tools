# {% version_info %}

Parameters:
  # Copilot required Parameters...
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.

  # Parameters from the parent stack brought in via addons.parameters.yml...
  EnvironmentSecurityGroup:
    Type: String
  DefaultPublicRoute:
    Type: String
  InternetGateway:
    Type: String
  InternetGatewayAttachment:
    Type: String
  PrivateSubnets:
    Type: String
  PublicRouteTable:
    Type: String
  PublicSubnet1RouteTableAssociation:
    Type: String
  PublicSubnet2RouteTableAssociation:
    Type: String
  VpcId:
    Type: String

  # Other parameters...
  # Customize your RDS Postgres cluster by setting the default value of the following parameters.
  {{ addon_config.prefix }}DBName:
    Type: String
    Description: The name of the initial database to be created.
    Default: main
    # Cannot have special characters
    # Naming constraints: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints

Mappings:
  {{ addon_config.prefix }}EnvironmentConfigMap:
{%- for env_name, config in addon_config.environments.items() %}
    {{ env_name }}:
      DBInstanceClass: '{{ config.instance }}'
      MultiAZ: {{ config.multi_az }}
      AllocatedStorage: {{ config.volume_size }}
      MaxAllocatedStorage: {{ (config.volume_size * 1.26)|round|int }}
      StorageType: {% if env_name == "prod" %}io1{% else %}gp3{% endif %}
      DeletionPolicy: {{ config.deletion_policy }}
      DeletionProtection: {{ config.deletion_protection if config.deletion_protection else false }}
      SnapshotIdentifier: {{ config.snapshot_id if config.snapshot_id else '""' }}
{%- endfor %}

Conditions:
    {{ addon_config.prefix }}CreateProdSubFilter: !Or [!Equals [!Ref Env, prod], !Equals [!Ref Env, production], !Equals [!Ref Env, PROD], !Equals [!Ref Env, PRODUCTION]]
    {{ addon_config.prefix }}UseSnapshot: !Not [!Equals [!FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, SnapshotIdentifier], ""]]

Resources:
  # Subnet group to control where the DB gets placed
  {{ addon_config.prefix }}DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DeletionPolicy: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      DBSubnetGroupDescription: Group of subnets to place DB into
      SubnetIds: !Split [ ",", !Ref PrivateSubnets ]

  # Security group to add the DB to the VPC,
  # and to allow the Fargate containers to talk to DB
  {{ addon_config.prefix }}SecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group to access the DB cluster'
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      GroupDescription: "DB Security Group"
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-{{ addon_config.name }}-RDS-Postgres-SecurityGroup'

  # Enable ingress from other ECS services created within the environment.
  {{ addon_config.prefix }}DBIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from containers in my application to the DB cluster'
    Type: AWS::EC2::SecurityGroupIngress
    DeletionPolicy: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: Ingress from Fargate containers
      GroupId: !Ref '{{ addon_config.prefix }}SecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref EnvironmentSecurityGroup

  {{ addon_config.prefix }}LambdaIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from Lambda Functions in my application to the DB'
    Type: AWS::EC2::SecurityGroupIngress
    DeletionPolicy: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: Ingress from Lambda Functions to DB
      GroupId: !Ref '{{ addon_config.prefix }}SecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref '{{ addon_config.prefix }}SecurityGroup'

  {{ addon_config.prefix }}SecretsManagerIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from Lambda Functions in my application to the Secrets Manager'
    Type: AWS::EC2::SecurityGroupIngress
    DeletionPolicy: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: Ingress from Lambda Functions to Secrets Manager
      GroupId: !Ref '{{ addon_config.prefix }}SecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref '{{ addon_config.prefix }}SecurityGroup'

  {{ addon_config.prefix }}LambdaEgress:
    Metadata:
      'aws:copilot:description': 'Allow egress from DB in my application to the Lambda Function'
    Type: AWS::EC2::SecurityGroupEgress
    DeletionPolicy: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: Egress from DB to Lambda Functions
      GroupId: !Ref '{{ addon_config.prefix }}SecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref '{{ addon_config.prefix }}SecurityGroup'

  {{ addon_config.prefix }}SecretsManagerEgress:
    Metadata:
      'aws:copilot:description': 'Allow egress from Secrets Manager in my application to the Lambda Function'
    Type: AWS::EC2::SecurityGroupEgress
    DeletionPolicy: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: Egress from Secrets Manager to Lambda Functions
      GroupId: !Ref '{{ addon_config.prefix }}SecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref '{{ addon_config.prefix }}SecurityGroup'

  {{ addon_config.prefix }}HTTPSEgress:
    Metadata:
      'aws:copilot:description': 'Allow egress for HTTPS (so the Lambda Function can post a success response back to the Custom Resource)'
    Type: AWS::EC2::SecurityGroupEgress
    DeletionPolicy: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      CidrIp: 0.0.0.0/0
      Description: Egress for HTTPS
      GroupId: !Ref '{{ addon_config.prefix }}SecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  {{ addon_config.prefix }}RDSDBParameterGroup:
    Metadata:
      'aws:copilot:description': 'A DB parameter group for engine configuration values'
    Type: 'AWS::RDS::DBParameterGroup'
    DeletionPolicy: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref 'AWS::StackName'
      Family: 'postgres{{ addon_config.version | int }}'
      Parameters:
        client_encoding: 'UTF8'
        log_statement: ddl
        log_statement_sample_rate: '1.0'

  {{ addon_config.prefix }}KMSKey:
    Type: "AWS::KMS::Key"
    DeletionPolicy: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: "KMS Key for RDS encryption"
      KeyPolicy:
        Version: '2012-10-17'
        Id: !Sub '${App}-${Env}-{{ addon_config.prefix }}-key'
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: kms:*
          Resource: '*'

  {{ addon_config.prefix }}KeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${App}-${Env}-{{ addon_config.prefix }}-key'
      TargetKeyId: !Ref {{ addon_config.prefix }}KMSKey

  # The cluster itself.
  {{ addon_config.prefix }}DBInstance:
    Metadata:
      'aws:copilot:description': 'DB cluster'
    Type: AWS::RDS::DBInstance
    DeletionPolicy: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 8
      EnablePerformanceInsights:
        !If [
          {{ addon_config.prefix }}UseSnapshot,
          !Ref AWS::NoValue,
          true
        ]
      EnableCloudwatchLogsExports:
        - postgresql
        - upgrade
      Engine: postgres
      EngineVersion: '{{ addon_config.version }}'
      DBInstanceClass: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, DBInstanceClass]
      DBSnapshotIdentifier: !If [{{ addon_config.prefix }}UseSnapshot, !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, SnapshotIdentifier], !Ref AWS::NoValue]
      AllocatedStorage: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, AllocatedStorage]
      MaxAllocatedStorage: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, MaxAllocatedStorage]
      StorageType: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, StorageType]
      MultiAZ: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, MultiAZ]
      DBParameterGroupName: !Ref {{ addon_config.prefix }}RDSDBParameterGroup
      DBName:
        !If [
          {{ addon_config.prefix }}UseSnapshot,
          !Ref AWS::NoValue,
          !Ref {{ addon_config.prefix }}DBName
        ]
      KmsKeyId:
        !If [
          {{ addon_config.prefix }}UseSnapshot,
          !Ref AWS::NoValue,
          !Ref {{ addon_config.prefix }}KMSKey
        ]
      MasterUsername:
        !If [
          {{ addon_config.prefix }}UseSnapshot,
          !Ref AWS::NoValue,
          !Join [ "",  [ '{% raw %}{{{% endraw %}resolve:secretsmanager:', !Ref {{ addon_config.prefix }}RDSSecret, ":SecretString:username{% raw %}}}{% endraw %}" ]]
        ]
      MasterUserPassword:
        !If [
          {{ addon_config.prefix }}UseSnapshot,
          !Ref AWS::NoValue,
          !Join [ "",  [ '{% raw %}{{{% endraw %}resolve:secretsmanager:', !Ref {{ addon_config.prefix }}RDSSecret, ":SecretString:password{% raw %}}}{% endraw %}" ]]
        ]
      DBSubnetGroupName: !Ref '{{ addon_config.prefix }}DBSubnetGroup'
      VPCSecurityGroups:
        - !Ref {{ addon_config.prefix }}SecurityGroup
      StorageEncrypted:
        !If [
          {{ addon_config.prefix }}UseSnapshot,
          !Ref AWS::NoValue,
          true
        ]
      DeletionProtection: !FindInMap [{{ addon_config.prefix }}EnvironmentConfigMap, !Ref Env, DeletionProtection]

  {{ addon_config.prefix }}RDSSecret:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your DB credentials'
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/copilot/${App}/${Env}/secrets/{{ addon_config.name|upper|replace("-", "_") }}'
      Description: !Sub RDS main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16
        ExcludeCharacters: '[]{}()"@/\;=?&`><:|#'

  {{ addon_config.prefix }}SecretRDSAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref {{ addon_config.prefix }}RDSSecret
      TargetId: !Ref {{ addon_config.prefix }}DBInstance
      TargetType: AWS::RDS::DBInstance

  {{ addon_config.prefix }}SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - {{ addon_config.prefix }}DBInstance
    Properties:
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/CWLtoSubscriptionFilterRole'
      LogGroupName: !Sub '/aws/rds/instance/${{ '{' }}{{ addon_config.prefix }}DBInstance}/postgresql'
      FilterName: !Sub '/aws/rds/instance/${App}/${Env}/${{ '{' }}{{ addon_config.prefix }}DBInstance}/postgresql'
      FilterPattern: ''
      DestinationArn: !If [{{ addon_config.prefix }}CreateProdSubFilter, '{{ log_destination.prod }}', '{{ log_destination.dev }}']

Outputs:
  {{ addon_config.prefix }}DBClusterSecurityGroupName:
    Description: The name of the db cluster security group
    Value: !Ref {{ addon_config.prefix }}SecurityGroup
    Export:
      Name: !Sub "${App}-${Env}-{{ addon_config.prefix }}-DBClusterSecurityGroupName"

  {{ addon_config.prefix }}PublicSubnet1RouteTableAssociationName:
    Description: The name of the first public subnet route table association
    Value: !Ref PublicSubnet1RouteTableAssociation
    Export:
      Name: !Sub "${App}-${Env}-{{ addon_config.prefix }}-PublicSubnet1RouteTableAssociationName"

  {{ addon_config.prefix }}PublicSubnet2RouteTableAssociationName:
    Description: The name of the second public subnet route table association
    Value: !Ref PublicSubnet2RouteTableAssociation
    Export:
      Name: !Sub "${App}-${Env}-{{ addon_config.prefix }}-PublicSubnet2RouteTableAssociationName"
    
  {{ addon_config.prefix }}RdsSecretName:
    Description: Name of RDS db secret
    Value: !Ref {{ addon_config.prefix }}RDSSecret
    Export:
      Name: !Sub "${App}-${Env}-{{ addon_config.prefix }}-RdsSecretName"

  {{ addon_config.prefix }}InternetGatewayName:
    Description: Name of internet gateway
    Value: !Ref InternetGateway
    Export:
      Name: !Sub "${App}-${Env}-{{ addon_config.prefix }}-InternetGatewayName"
  
  {{ addon_config.prefix }}PublicRouteTableName:
    Description: Name of public route table
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub "${App}-${Env}-{{ addon_config.prefix }}-PublicRouteTableName"
  
  {{ addon_config.prefix }}DefaultPublicRouteName:
    Description: Name of default public route
    Value: !Ref DefaultPublicRoute
    Export:
      Name: !Sub "${App}-${Env}-{{ addon_config.prefix }}-DefaultPublicRouteName"
    
  {{ addon_config.prefix }}InternetGatewayAttachmentName:
    Description: Name of internet gateway attachment
    Value: !Ref InternetGatewayAttachment
    Export:
      Name: !Sub "${App}-${Env}-{{ addon_config.prefix }}-InternetGatewayAttachmentName"

  {{ addon_config.prefix }}PrivateSubnetsName:
    Description: Name of private subnets
    Value: !Ref PrivateSubnets
    Export:
      Name: !Sub "${App}-${Env}-{{ addon_config.prefix }}-PrivateSubnetsName"
