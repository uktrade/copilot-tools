# {% version_info %}
Parameters:
  # Copilot required Parameters...
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.

  # Parameters from the parent stack brought in via addons.parameters.yml...
  EnvironmentSecurityGroup:
    Type: String
  PrivateSubnets:
    Type: String
  VpcId:
    Type: String

  # Other parameters...
  # Customize your RDS Postgres cluster by setting the default value of the following parameters.
  {{ service.prefix }}DBName:
    Type: String
    Description: The name of the initial database to be created.
    Default: main
    # Cannot have special characters
    # Naming constraints: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints

Mappings:
  {{ service.prefix }}EnvScalingConfigurationMap:
{% for env_name, config in service.environments.items() %}
    {{ env_name }}:
      DBInstanceClass: '{{ config.instance }}'
      MultiAZ: {% if config.replicas %}true{% else %}false{% endif %}
      AllocatedStorage: {{ config.volume_size }}
      MaxAllocatedStorage: {{ (config.volume_size * 1.26)|round|int }}
      StorageType: {% if env_name == "prod" %}io1{% else %}gp3{% endif %}
{% endfor %}

Resources:
  # Subnet group to control where the DB gets placed
  {{ service.prefix }}DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Group of subnets to place DB into
      SubnetIds: !Split [ ",", !Ref PrivateSubnets ]

  # Security group to add the DB to the VPC,
  # and to allow the Fargate containers to talk to DB
  {{ service.prefix }}SecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group to access the DB cluster'
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "DB Security Group"
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-{{ service.name }}-RDS-Postgres-SecurityGroup'

  # Enable ingress from other ECS services created within the environment.
  {{ service.prefix }}DBIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from containers in my application to the DB cluster'
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from Fargate containers
      GroupId: !Ref '{{ service.prefix }}SecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref EnvironmentSecurityGroup

  {{ service.prefix }}RDSDBParameterGroup:
    Metadata:
      'aws:copilot:description': 'A DB parameter group for engine configuration values'
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: !Ref 'AWS::StackName'
      Family: 'postgres13'
      Parameters:
        client_encoding: 'UTF8'
        log_statement: ddl
        log_statement_sample_rate: '1.0'

  {{ service.prefix }}KMSKey:
    Type: "AWS::KMS::Key"
    Properties: 
      Description: "KMS Key for RDS encryption"
      KeyPolicy:
        Version: '2012-10-17'
        Id: !Sub '${App}-${Env}-{{ service.prefix }}-key'
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: kms:*
          Resource: '*'
    
  {{ service.prefix }}KeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${App}-${Env}-{{ service.prefix }}-key'
      TargetKeyId: !Ref {{ service.prefix }}KMSKey

  # The cluster itself.
  {{ service.prefix }}DBInstance:
    Metadata:
      'aws:copilot:description': 'DB cluster'
    Type: AWS::RDS::DBInstance
    Properties:
      AutoMinorVersionUpgrade: true
      EnablePerformanceInsights: true
      EnableCloudwatchLogsExports:
        - postgresql
        - upgrade
      Engine: postgres
      EngineVersion: '13'
      DBInstanceClass: !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, DBInstanceClass]
      AllocatedStorage: !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, AllocatedStorage]
      MaxAllocatedStorage: !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, MaxAllocatedStorage]
      StorageType: !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, StorageType]
      MultiAZ: !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, MultiAZ]
      DBParameterGroupName: !Ref {{ service.prefix }}RDSDBParameterGroup
      AllowMajorVersionUpgrade: false
      BackupRetentionPeriod: 7
      DBName: !Ref {{ service.prefix }}DBName
      KmsKeyId: !Ref {{ service.prefix }}KMSKey
      MasterUsername:
        !Join [ "",  [ '{% raw %}{{{% endraw %}resolve:secretsmanager:', !Ref {{ service.prefix }}RDSSecret, ":SecretString:username{% raw %}}}{% endraw %}" ]]
      MasterUserPassword:
        !Join [ "",  [ '{% raw %}{{{% endraw %}resolve:secretsmanager:', !Ref {{ service.prefix }}RDSSecret, ":SecretString:password{% raw %}}}{% endraw %}" ]]
      DBSubnetGroupName: !Ref '{{ service.prefix }}DBSubnetGroup'
      VPCSecurityGroups:
        - !Ref {{ service.prefix }}SecurityGroup
      StorageEncrypted: true

  {{ service.prefix }}RDSSecret:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your DB credentials'
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/copilot/${App}/${Env}/secrets/{{ service.name|upper|replace("-", "_") }}'
      Description: !Sub RDS main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16
        ExcludeCharacters: '[]{}()"@/\;=?&`><:|#'

  {{ service.prefix }}SecretRDSAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref {{ service.prefix }}RDSSecret
      TargetId: !Ref {{ service.prefix }}DBInstance
      TargetType: AWS::RDS::DBInstance
