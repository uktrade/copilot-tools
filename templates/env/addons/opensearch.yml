Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.


Mappings:
  {{ service.prefix }}EnvScalingConfigurationMap:
    # Create an entry for each environment
    {% for env_name, config in service.environments.items() %}
    {{ env_name }}:
      EngineVersion: '{{ config.engine }}'
      InstanceType: '{{ config.instance }}'
      InstanceCount: {{ config.instances }}
      DedicatedMaster: {{ config.master|lower }}
      VolumeSize: {{ config.volume_size }}
    {% endfor %}

  {{ service.prefix }}EngineVersionMap:
    '1.0':
      EngineVersion: 'OpenSearch_1.0'  
    '1.1':
      EngineVersion: 'OpenSearch_1.1'
    '1.2':
      EngineVersion: 'OpenSearch_1.2'
    '1.3':
      EngineVersion: 'OpenSearch_1.3'
    '2.3':
      EngineVersion: 'OpenSearch_2.3'

Resources:
  # Security group to add OS to the VPC,
  # and to allow the Fargate containers to talk to OS
  {{ service.prefix }}OpenSearchSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group to access OS'
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'The Security Group for {{ service.name }} to access OpenSearch.'
      VpcId:
        'Fn::ImportValue':
          !Sub '${App}-${Env}-VpcId'
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-{{ service.name }}-OpenSearch-SecurityGroup'

  # Enable ingress from other ECS services created within the environment.
  {{ service.prefix }}OpenSearchIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from containers in my application to the OpenSearch cluster'
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress Security Group from Fargate containers
      GroupId: !Ref '{{ service.prefix }}OpenSearchSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: { 'Fn::ImportValue': !Sub '${App}-${Env}-EnvironmentSecurityGroup' }
  # The cluster itself.
  {{ service.prefix }}OpenSearchDomain:
    Type: 'AWS::OpenSearchService::Domain'
    Properties:
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - 'es:ESHttp*'
          Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${App}-${Env}-{{ service.name }}/*'
      DomainName: !Sub "{% if '${App}-${Env}-{{ service.name }}' | length > 28 %}{{ '${App}'[:1] }}-{{ '${Env}'[:1] }}-{{ service.name | truncate(28 - '${App}'[:1] | length - '${Env}'[:1] | length, '', False) }}{% else %}${{ '${App}-${Env}-{{ service.name }}' }}{% endif %}"
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: 'Policy-Min-TLS-1-2-2019-07'
      EngineVersion: !FindInMap
        - {{ service.prefix }}EngineVersionMap
        - !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, EngineVersion]
        - EngineVersion
      EBSOptions:
        EBSEnabled: true
        VolumeSize: !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, VolumeSize]
        VolumeType: gp2
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, InstanceCount]
        InstanceType: !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, InstanceType]
      # UpdatePolicy:    cfn-lint does not like this; find out where the setting should live
      #   EnableVersionUprade: true
      VPCOptions:
        SecurityGroupIds:
        - !Ref {{ service.prefix }}OpenSearchSecurityGroup
        SubnetIds:
          - !Select [0, !Split [ ',', { 'Fn::ImportValue': !Sub '${App}-${Env}-PrivateSubnets' } ] ]
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-{{ service.name }}-OpenSearch-Domain'
  {{ service.prefix }}OpenSearchEndpointAddressParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/copilot/${App}/${Env}/secrets/{{ service.secret_name }}"
      Type: String
      Value: !Sub 
        - "https://${url}"
        - url: !GetAtt {{ service.prefix }}OpenSearchDomain.DomainEndpoint
Outputs:
  {{ service.prefix }}OpenSearchSecurityGroup:
    Description: Security group for OpenSearch
    Value: !Ref {{ service.prefix }}OpenSearchSecurityGroup

