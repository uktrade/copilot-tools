Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.

# Mappings:
#   {{ service.prefix }}EnvScalingConfigurationMap:
#     EngineVersionMap:
#       '6.2':
#         CacheParameterGroupFamily: 'redis6.x'
#       '6.0':
#         CacheParameterGroupFamily: 'redis6.x'
#       '5.0.6':
#         CacheParameterGroupFamily: 'redis5.0'
#       '5.0.4':
#         CacheParameterGroupFamily: 'redis5.0'
#       '5.0.3':
#         CacheParameterGroupFamily: 'redis5.0'
#       '5.0.0':
#         CacheParameterGroupFamily: 'redis5.0'
#       '4.0.10':
#         CacheParameterGroupFamily: 'redis4.0'
#       '3.2.6':
#         CacheParameterGroupFamily: 'redis3.2'
#     dev:
#       "CacheNodeType": "cache.m4.large"
#       "NumCacheNodes": 1
#       "DBMaxCapacity": 8
#     All:
#       "DBMinCapacity": 0.5
#       "DBMaxCapacity": 8

Resources:
  # Subnet group to control where the Redis gets placed
  {{ service.prefix }}RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Group of subnets to place Redis into
      SubnetIds: !Split [ ',', { 'Fn::ImportValue': !Sub '${App}-${Env}-PrivateSubnets' } ]

  # Security group to add the Redis cluster to the VPC,
  # and to allow the Fargate containers to talk to Redis on port 6379
  {{ service.prefix }}RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Redis Security Group"
      VpcId: { 'Fn::ImportValue': !Sub '${App}-${Env}-VpcId' }

  # Enable ingress from other ECS services created within the environment.
  {{ service.prefix }}RedisIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from Fargate containers
      GroupId: !Ref '{{ service.prefix }}RedisSecurityGroup'
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId: { 'Fn::ImportValue': !Sub '${App}-${Env}-EnvironmentSecurityGroup' }

  # The cluster itself.
  {{ service.prefix }}Redis:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      CacheNodeType: cache.m4.large
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref '{{ service.prefix }}RedisSubnetGroup'
      # TransitEncryptionEnabled: true
      VpcSecurityGroupIds:
        - !GetAtt '{{ service.prefix }}RedisSecurityGroup.GroupId'

  # Redis endpoint stored in SSM so that other services can retrieve the endpoint.
  {{ service.prefix }}RedisEndpointAddressParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/copilot/${App}/${Env}/secrets/{{ service.name|upper|replace("-", "_") }}'   # Other services can retrieve the endpoint from this path.
      Type: String
      Value: !GetAtt '{{ service.prefix }}.RedisEndpoint.Address'

Outputs:
  {{ service.prefix }}RedisEndpoint:
    Description: The endpoint of the redis cluster
    Value: !GetAtt '{{ service.prefix }}.RedisEndpoint.Address'
