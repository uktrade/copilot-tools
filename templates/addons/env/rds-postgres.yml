Parameters:
  # Copilot required Parameters...
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.

  # Parameters from the parent stack brought in via addons.parameters.yml...
  EnvironmentSecurityGroup:
    Type: String
  PrivateSubnets:
    Type: String
  VpcId:
    Type: String

  # Other parameters...
  # Customize your RDS Postgres cluster by setting the default value of the following parameters.
  {{ service.prefix }}DBName:
    Type: String
    Description: The name of the initial database to be created.
    Default: main
    # Cannot have special characters
    # Naming constraints: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints

Mappings:
  {{ service.prefix }}EnvScalingConfigurationMap:
    {% for env_name, config in service.environments.items() %}
    {{ env_name }}:
      DBInstanceClass: '{{ config.instance }}'
      MultiAZ: {% if config.replicas %} true {% else %} false {% endif %}
      AllocatedStorage: {{ config.volume_size }}
      MaxAllocatedStorage: {{ config.volume_size * 1.26 }}
      StorageType: {% if env_name == "prod" %} io1 {% else %} gp3 {% endif %}

    {% endfor %}

Resources:
  # Subnet group to control where the DB gets placed
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Group of subnets to place DB into
      SubnetIds: !Split [ ",", !Ref PrivateSubnets ]
  # Security group to add the DB to the VPC,
  # and to allow the Fargate containers to talk to DB
  {{ service.prefix }}SecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group to access the DB cluster'
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "DB Security Group"
      VpcId: !Ref VpcId
  # Enable ingress from other ECS services created within the environment.
  DBIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from containers in my application to the DB cluster'
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from Fargate containers
      GroupId: !Ref '{{ service.prefix }}SecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref EnvironmentSecurityGroup
  # The cluster itself.
  {{ service.prefix }}DBInstance:
    Metadata:
      'aws:copilot:description': 'DB cluster'
    Type: AWS::RDS::DBInstance
    Properties:
      AutoMinorVersionUpgrade: true
      EnablePerformanceInsights: true
      Engine: postgres
      EngineVersion: '13.4'
      DBInstanceClass: !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, DBInstanceClass]
      AllocatedStorage: !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, AllocatedStorage]
      MaxAllocatedStorage: !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, MaxAllocatedStorage]
      StorageType: !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, StorageType]
      MultiAZ: !FindInMap [{{ service.prefix }}EnvScalingConfigurationMap, !Ref Env, MultiAZ]
      AllowMajorVersionUpgrade: false
      BackupRetentionPeriod: 7
      DBName: !Ref {{ service.prefix }}DBName
      MasterUsername:
        !Join [ "",  [ '{% raw %}{{{% endraw %}resolve:secretsmanager:', !Sub '${App}/${Env}/{{ service.secret_name }}', ":SecretString:username{% raw %}}}{% endraw %}" ]]
      MasterUserPassword:
        !Join [ "",  [ '{% raw %}{{{% endraw %}resolve:secretsmanager:', !Sub '${App}/${Env}/{{ service.secret_name }}', ":SecretString:password{% raw %}}}{% endraw %}" ]]
      DBSubnetGroupName: !Ref 'DBSubnetGroup'
      VPCSecurityGroups:
        - !Ref {{ service.prefix }}SecurityGroup
  {{ service.prefix }}RDSSecret:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your DB credentials'
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${App}/${Env}/{{ service.secret_name }}'
      Description: !Sub RDS main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16

  {{ service.prefix }}SecretRDSAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref {{ service.prefix }}RDSSecret
      TargetId: !Ref {{ service.prefix }}DBInstance
      TargetType: AWS::RDS::DBInstance
